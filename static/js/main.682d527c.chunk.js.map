{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundry.jsx","containers/App.jsx","actions.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","props","src","username","alt","name","className","email","CardList","robots","map","el","key","id","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","App","onRequestRobots","searchField","isPending","filteredRobots","filter","toLowerCase","includes","toLocaleLowerCase","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","err","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.682d527c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = (props) => {\r\n    const src = `https://robohash.org/${props.username}?200x200`\r\n    const alt = `${props.name}'s photo`\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc \">\r\n            <img src= {src} alt={alt}/>\r\n            <div>\r\n                <h2>\r\n                    {props.name}\r\n                </h2>\r\n                <p>\r\n                    {props.email}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\n// import { robots } from './robots'\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map(el => (\r\n                    <Card key={el.id} name={el.name} email={el.email} username = {el.username} ></Card>\r\n                    ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst SearchBox = ({onSearchChange}) => {\r\n    // function onChange(e){\r\n    //     return onSearchChange(e.target.value)\r\n    // }\r\n    return(\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'\r\n            type='search' placeholder=\"search robots\" onChange={onSearchChange}></input>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{\r\n            overflowY: \"scroll\",\r\n            border: '1px solid black',\r\n            height:'500px'\r\n        }} >\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React from 'react'\r\n\r\nclass ErrorBoundry extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooops that is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry","import React from 'react'\r\nimport CardList from './../components/CardList'\r\nimport SearchBox from './../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from './../components/ErrorBoundry'\r\n// import { searchRobots } from './../reducers'\r\n// import {robots} from './robots'\r\nimport './App.css'\r\nimport { connect } from 'react-redux'\r\nimport { setSearchField, requestRobots } from './../actions'\r\n\r\nclass App extends React.Component{\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    // onSearchChange = (e) => {\r\n    //     this.setState({ searchField: e.target.value })\r\n        \r\n    // }\r\n\r\n    render(){\r\n        const { searchField, onSearchChange, robots, isPending } = this.props\r\n        // const {robots} = this.state\r\n        const filteredRobots = robots.filter(el => {\r\n            return el.name.toLowerCase().includes(`${searchField.toLocaleLowerCase()}`)\r\n        })\r\n        if(isPending){\r\n            return <div>Loading</div>\r\n        }else{\r\n            return (\r\n                <div>\r\n                    <div className='tc'>\r\n                        <h1 className='f1'>ROBOFRIENDS</h1>\r\n                        <SearchBox onSearchChange= {onSearchChange}/>\r\n                        <Scroll>\r\n                            <ErrorBoundry>\r\n                                <CardList robots={filteredRobots} />\r\n                            </ErrorBoundry>\r\n                        </Scroll>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","export const setSearchField = text => ({\r\n    type: 'CHANGE_SEARCH_FIELD',\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: \"REQUEST_ROBOTS_PENDING\" })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => res.json())\r\n        .then(data => dispatch({ type: 'REQUEST_ROBOTS_SUCCESS', payload: data }))\r\n        .catch(err => dispatch({ type: 'REQUEST_ROBOTS_FAILED', payload: err }))\r\n}","const initialStateSearch = {\r\n    searchField: \"\"\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action) => {\r\n    switch(action.type){\r\n        case \"CHANGE_SEARCH_FIELD\":\r\n            return {...state, searchField: action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: \"\"\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action) => {\r\n    switch(action.type){\r\n        case \"REQUEST_ROBOTS_PENDING\":\r\n            return {...state, isPending: true}\r\n\r\n        case 'REQUEST_ROBOTS_SUCCESS':\r\n            return {...state, isPending: false, robots: action.payload, error: \"\" }\r\n\r\n        case 'REQUEST_ROBOTS_FAILED':\r\n            return {...state, isPending: false, error: action.payload }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Provider} from 'react-redux'\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport {createLogger} from 'redux-logger'\r\nimport App from './containers/App.jsx'\r\nimport { searchRobots, requestRobots } from './reducers'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nimport 'tachyons'\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst logger = createLogger()\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store} >\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}